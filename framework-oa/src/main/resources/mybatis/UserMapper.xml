<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace必须指向Dao接口 -->
<mapper namespace="com.tx.framework.web.dao.account.UserDao">

	<resultMap type="User" id="userMap">
		<id column="id" property="id" jdbcType="CHAR" />
		<result column="login_name" property="loginName" jdbcType="VARCHAR" />
		<result column="user_name" property="userName" jdbcType="VARCHAR" />
		<result column="password" property="password" jdbcType="VARCHAR" />
		<result column="salt" property="salt" jdbcType="VARCHAR" />
		<result column="register_date" property="registerDate"
			jdbcType="TIMESTAMP" />
		<result column="user_state" property="userState" jdbcType="INTEGER" />
		<collection property="roles" resultMap="com.tx.framework.web.dao.role.RoleDao.roleMap" />
	</resultMap>
 
	<!-- 获取所有用户 -->
	<select id="findAll" resultMap="userMap">
		select
		u.*,r.id as
		r_id,r.role_name,r.state,r.remark,r.parent_id
		from user u left join
		role_user ru on u.id = ru.user_id
		left join role r on ru.role_id = r.id
	</select>

	<!-- 根据id查找用户 -->
	<select id="findOne" parameterType="String" resultMap="userMap">
		select
		u.*,r.id as r_id,r.role_name,r.state,r.remark,r.parent_id
		from user u
		left join role_user ru on u.id = ru.user_id
		left join role r on
		ru.role_id = r.id
		where u.id=#{id}
	</select>

	<!-- 查询分页 -->
	<select id="getPage" resultMap="userMap">
		select
		u.*,r.id as r_id,r.role_name,r.state,r.remark,r.parent_id
		from
		user u left join
		role_user ru on u.id = ru.user_id
		left join role r on
		ru.role_id = r.id
		<where>
			<if test="po.userName != null and po.userName != ''">
				u.user_name like CONCAT('%',#{po.userName},'%')
			</if>
		</where>
	</select>

	<!-- 根据用户名查找用户 -->
	<!-- 注意使用collection或者association的时候联合查询的时候，重名列 注意用as来做别名。否则会有问题 -->
	<select id="findByLoginName" parameterType="String" resultMap="userMap">
		select
		u.*,r.id as r_id,r.role_name,r.state,r.remark,r.parent_id
		from
		user u left join
		role_user ru on u.id = ru.user_id
		left join role r on
		ru.role_id = r.id
		where u.login_name=#{loginName}
	</select>
 
 	<!-- 新增 -->
	<insert id="save" parameterType="User">
		<selectKey resultType="String" keyProperty="id" order="BEFORE">
			select REPLACE(UUID(),'-','')
		</selectKey>
		insert into user
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="loginName != null">
				login_name,
			</if>
			<if test="userName != null">
				user_name,
			</if>
			<if test="password != null">
				password,
			</if>
			<if test="salt != null">
				salt,
			</if>
			<if test="registerDate != null">
				register_date,
			</if>
			<if test="userState != null">
				user_state,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=CHAR},
			</if>
			<if test="loginName != null">
				#{loginName,jdbcType=VARCHAR},
			</if>
			<if test="userName != null">
				#{userName,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				#{password,jdbcType=VARCHAR},
			</if>
			<if test="salt != null">
				#{salt,jdbcType=VARCHAR},
			</if>
			<if test="registerDate != null">
				#{registerDate,jdbcType=TIMESTAMP},
			</if>
			<if test="userState != null">
				#{userState,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>

	<!-- 更新 -->
	<update id="update" parameterType="User">
		update user
		<set>
			<if test="loginName != null">
				login_name = #{loginName,jdbcType=VARCHAR},
			</if>
			<if test="userName != null">
				user_name = #{userName,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				password = #{password,jdbcType=VARCHAR},
			</if>
			<if test="salt != null">
				salt = #{salt,jdbcType=VARCHAR},
			</if>
			<if test="registerDate != null">
				register_date = #{registerDate,jdbcType=TIMESTAMP},
			</if>
			<if test="userState != null">
				user_state = #{userState,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=CHAR}
	</update>

	<!-- 删除用户 -->
	<delete id="delete" parameterType="String">
		delete from user where id=#{id}
	</delete>
</mapper> 
